<<<<<<< HEAD
import telebot
import socket
import pyautogui
import platform
import cv2
import os
import subprocess
import ctypes
import requests
import pytube
import random
from wakeonlan import send_magic_packet
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import output
from time import sleep

for line in output.fsociety_ascii:
    print(line)
    sleep(0.1)
TOKEN = '7482583188:AAFj3GdfbPG1LGrnX0lVX-CBIcbAK1R8mA4'
ADMIN_ID = '1447911438'
GROUP_ID = '-1002571744053'

bot = telebot.TeleBot(TOKEN)
menu_message_id = None

def is_authorized(user):
    return str(user.id) == ADMIN_ID

def is_pc_available():
    try:
        result = subprocess.run('ping -n 1 localhost', shell=True, capture_output=True, text=True, creationflags=subprocess.CREATE_NO_WINDOW)
        return result.returncode == 0
    except:
        return False

def get_main_menu():
    markup = InlineKeyboardMarkup(row_width=2)
    btn_ip = InlineKeyboardButton('üåê Get IP', callback_data='cmd_ip')
    btn_screenshot = InlineKeyboardButton('üì∏ Screenshot', callback_data='cmd_screenshot')
    btn_sysinfo = InlineKeyboardButton('üíª Sys Info', callback_data='cmd_sysinfo')
    btn_webcam = InlineKeyboardButton('üì∑ Webcam', callback_data='cmd_webcam')
    btn_shutdown = InlineKeyboardButton('‚èª Shutdown', callback_data='cmd_shutdown')
    btn_wol = InlineKeyboardButton('üîå Wake-on-LAN', callback_data='cmd_wol')
    btn_cmd = InlineKeyboardButton('üñ•Ô∏è CMD', callback_data='cmd_cmd')
    btn_wallpaper = InlineKeyboardButton('üñºÔ∏è Wallpaper', callback_data='cmd_wallpaper')
    btn_open = InlineKeyboardButton('üåê Open URL', callback_data='cmd_open')
    btn_play = InlineKeyboardButton('üé• Play Video', callback_data='cmd_play')
    btn_dice = InlineKeyboardButton('üé≤ Dice', callback_data='cmd_dice')
    btn_help = InlineKeyboardButton('‚ùì Help', callback_data='cmd_help')
    markup.add(btn_ip, btn_screenshot, btn_sysinfo, btn_webcam, btn_shutdown, btn_wol, btn_cmd, btn_wallpaper, btn_open, btn_play, btn_dice, btn_help)
    return markup

def get_back_button():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='cmd_back'))
    return markup

def update_menu(chat_id, message_id=None):
    global menu_message_id
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º."
    try:
        if message_id:
            bot.edit_message_text(text, chat_id=chat_id, message_id=message_id, reply_markup=get_main_menu(), parse_mode='HTML')
            menu_message_id = message_id
        else:
            sent_message = bot.send_message(chat_id, text, reply_markup=get_main_menu(), parse_mode='HTML')
            menu_message_id = sent_message.message_id
    except Exception as e:
        sent_message = bot.send_message(chat_id, text, reply_markup=get_main_menu(), parse_mode='HTML')
        menu_message_id = sent_message.message_id

def get_ip():
    if not is_pc_available():
        bot.send_message(GROUP_ID, "‚ö†Ô∏è –ü–ö –≤—ã–∫–ª—é—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ /wol.")
        return
    ip = socket.gethostbyname(socket.gethostname())
    bot.send_message(GROUP_ID, f"üåê <b>IP-–∞–¥—Ä–µ—Å:</b> {ip}", parse_mode='HTML')

def take_screenshot():
    if not is_pc_available():
        bot.send_message(GROUP_ID, "‚ö†Ô∏è –ü–ö –≤—ã–∫–ª—é—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ /wol.")
        return
    screenshot = pyautogui.screenshot()
    screenshot.save('screenshot.png')
    bot.send_photo(GROUP_ID, open('screenshot.png', 'rb'), caption="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω")
    os.remove('screenshot.png')

def get_sysinfo():
    if not is_pc_available():
        bot.send_message(GROUP_ID, "‚ö†Ô∏è –ü–ö –≤—ã–∫–ª—é—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ /wol.")
        return
    sysinfo = f"""
üíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</b>
‚Ä¢ <b>–°–∏—Å—Ç–µ–º–∞:</b> {platform.system()}
‚Ä¢ <b>–ò–º—è —É–∑–ª–∞:</b> {platform.node()}
‚Ä¢ <b>–†–µ–ª–∏–∑:</b> {platform.release()}
‚Ä¢ <b>–í–µ—Ä—Å–∏—è:</b> {platform.version()}
‚Ä¢ <b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b> {platform.machine()}
‚Ä¢ <b>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b> {platform.processor()}
"""
    bot.send_message(GROUP_ID, sysinfo, parse_mode='HTML')

def take_webcam_screenshot():
    if not is_pc_available():
        bot.send_message(GROUP_ID, "‚ö†Ô∏è –ü–ö –≤—ã–∫–ª—é—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ /wol.")
        return
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        bot.send_message(GROUP_ID, "üì∑ –í–µ–±-–∫–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    ret, frame = cap.read()
    if ret:
        cv2.imwrite('webcam.png', frame)
        bot.send_photo(GROUP_ID, open('webcam.png', 'rb'), caption="üì∑ –°–Ω–∏–º–æ–∫ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã")
        os.remove('webcam.png')
    else:
        bot.send_message(GROUP_ID, "üì∑ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫.")
    cap.release()

def shutdown_computer():
    if not is_pc_available():
        bot.send_message(GROUP_ID, "‚ö†Ô∏è –ü–ö —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω.")
        return
    if platform.system() == 'Windows':
        os.system("shutdown /s /t 0")
    elif platform.system() == 'Linux':
        os.system("shutdown now")
    bot.send_message(GROUP_ID, "‚èª –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è.")

def wake_on_lan():
    mac_address = 'D8-43-AE-8D-FD-2B'
    send_magic_packet(mac_address)
    bot.send_message(GROUP_ID, "üîå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª Wake-on-LAN.")

def execute_cmd(command):
    if not is_pc_available():
        bot.send_message(GROUP_ID, "‚ö†Ô∏è –ü–ö –≤—ã–∫–ª—é—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ /wol.")
        return
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, creationflags=subprocess.CREATE_NO_WINDOW)
        output = result.stdout if result.stdout else result.stderr
        bot.send_message(GROUP_ID, f"üñ•Ô∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã:</b>\n<pre>{output}</pre>", parse_mode='HTML')
    except Exception as e:
        bot.send_message(GROUP_ID, f"üñ•Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

def set_wallpaper_from_url(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            with open('wallpaper.jpg', 'wb') as f:
                f.write(response.content)
            ctypes.windll.user32.SystemParametersInfoW(20, 0, os.path.abspath('wallpaper.jpg'), 3)
            bot.send_message(GROUP_ID, "üñºÔ∏è –û–±–æ–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            os.remove('wallpaper.jpg')
        else:
            bot.send_message(GROUP_ID, "üñºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    except Exception as e:
        bot.send_message(GROUP_ID, f"üñºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±–æ–µ–≤: {e}")

def set_wallpaper_from_file(file_path):
    try:
        ctypes.windll.user32.SystemParametersInfoW(20, 0, os.path.abspath(file_path), 3)
        bot.send_message(GROUP_ID, "üñºÔ∏è –û–±–æ–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        os.remove(file_path)
    except Exception as e:
        bot.send_message(GROUP_ID, f"üñºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±–æ–µ–≤: {e}")

def open_url(url):
    if not is_pc_available():
        bot.send_message(GROUP_ID, "‚ö†Ô∏è –ü–ö –≤—ã–∫–ª—é—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ /wol.")
        return
    try:
        import webbrowser
        webbrowser.open(url)
        bot.send_message(GROUP_ID, f"üåê URL –æ—Ç–∫—Ä—ã—Ç: {url}")
    except Exception as e:
        bot.send_message(GROUP_ID, f"üåê –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ URL: {e}")

def play_video(url):
    if not is_pc_available():
        bot.send_message(GROUP_ID, "‚ö†Ô∏è –ü–ö –≤—ã–∫–ª—é—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ /wol.")
        return
    try:
        yt = pytube.YouTube(url)
        stream = yt.streams.filter(progressive=True, file_extension='mp4').first()
        stream.download(filename='video.mp4')
        os.startfile('video.mp4')
        bot.send_message(GROUP_ID, f"üé• –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ: {yt.title}")
    except Exception as e:
        bot.send_message(GROUP_ID, f"üé• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")

def roll_dice():
    if not is_pc_available():
        bot.send_message(GROUP_ID, "‚ö†Ô∏è –ü–ö –≤—ã–∫–ª—é—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ /wol.")
        return
    result = random.randint(1, 6)
    bot.send_message(GROUP_ID, f"üé≤ –ë—Ä–æ—Å–∞—é –∫—É–±–∏–∫... –†–µ–∑—É–ª—å—Ç–∞—Ç: **{result}**", parse_mode='HTML')

def send_help():
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
üåê /ip - –ü–æ–ª—É—á–∏—Ç—å IP-–∞–¥—Ä–µ—Å
üì∏ /screenshot - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
üíª /sysinfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
üì∑ /webcam - –§–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã
‚èª /shutdown - –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö
üîå /wol - –í–∫–ª—é—á–∏—Ç—å –ü–ö –ø–æ —Å–µ—Ç–∏ (Wake-on-LAN)
üñ•Ô∏è /cmd <–∫–æ–º–∞–Ω–¥–∞> - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
üñºÔ∏è /wallpaper - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–æ–∏ (–¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ URL)
üåê /open <URL> - –û—Ç–∫—Ä—ã—Ç—å URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ
üé• /play <URL> - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ —Å YouTube
üé≤ /dice - –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
‚ùì /help - –ü–æ–º–æ—â—å
"""
    bot.send_message(GROUP_ID, help_text)

@bot.message_handler(commands=['start'])
def start_handler(message):
    if is_authorized(message.from_user):
        update_menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

@bot.message_handler(commands=['ip'])
def ip_command(message):
    if is_authorized(message.from_user):
        get_ip()

@bot.message_handler(commands=['screenshot'])
def screenshot_command(message):
    if is_authorized(message.from_user):
        take_screenshot()

@bot.message_handler(commands=['sysinfo'])
def sysinfo_command(message):
    if is_authorized(message.from_user):
        get_sysinfo()

@bot.message_handler(commands=['webcam'])
def webcam_command(message):
    if is_authorized(message.from_user):
        take_webcam_screenshot()

@bot.message_handler(commands=['shutdown'])
def shutdown_command(message):
    if is_authorized(message.from_user):
        shutdown_computer()

@bot.message_handler(commands=['wol'])
def wol_command(message):
    if is_authorized(message.from_user):
        wake_on_lan()

@bot.message_handler(commands=['cmd'])
def cmd_command(message):
    if is_authorized(message.from_user):
        cmd_text = message.text.split(' ', 1)
        if len(cmd_text) < 2:
            bot.send_message(message.chat.id, "üñ•Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
            return
        command = cmd_text[1]
        execute_cmd(command)

@bot.message_handler(commands=['wallpaper'])
def wallpaper_command(message):
    if is_authorized(message.from_user):
        if message.reply_to_message and message.reply_to_message.photo:
            file_id = message.reply_to_message.photo[-1].file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            path = 'wallpaper.jpg'
            with open(path, 'wb') as new_file:
                new_file.write(downloaded_file)
            set_wallpaper_from_file(path)
        else:
            bot.send_message(message.chat.id, "üñºÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ /wallpaper –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ —Å –æ–±–æ—è–º–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")

@bot.message_handler(commands=['open'])
def open_command(message):
    if is_authorized(message.from_user):
        parts = message.text.split(' ', 1)
        if len(parts) < 2:
            bot.send_message(message.chat.id, "üåê –£–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è.")
            return
        open_url(parts[1])

@bot.message_handler(commands=['play'])
def play_command(message):
    if is_authorized(message.from_user):
        parts = message.text.split(' ', 1)
        if len(parts) < 2:
            bot.send_message(message.chat.id, "üé• –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube.")
            return
        play_video(parts[1])

@bot.message_handler(commands=['dice'])
def dice_command(message):
    if is_authorized(message.from_user):
        roll_dice()

@bot.message_handler(commands=['help'])
def help_command(message):
    if is_authorized(message.from_user):
        send_help()

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if not is_authorized(call.from_user):
        bot.answer_callback_query(call.id, "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if call.data == 'cmd_ip':
        get_ip()
    elif call.data == 'cmd_screenshot':
        take_screenshot()
    elif call.data == 'cmd_sysinfo':
        get_sysinfo()
    elif call.data == 'cmd_webcam':
        take_webcam_screenshot()
    elif call.data == 'cmd_shutdown':
        shutdown_computer()
    elif call.data == 'cmd_wol':
        wake_on_lan()
    elif call.data == 'cmd_dice':
        roll_dice()
    elif call.data == 'cmd_help':
        send_help()
    elif call.data == 'cmd_back':
        update_menu(call.message.chat.id, call.message.message_id)
    elif call.data == 'cmd_cmd':
        bot.send_message(call.message.chat.id, "üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cmd <–∫–æ–º–∞–Ω–¥–∞> –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
    elif call.data == 'cmd_wallpaper':
        bot.send_message(call.message.chat.id, "üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /wallpaper –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç.")
    elif call.data == 'cmd_open':
        bot.send_message(call.message.chat.id, "üåê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /open <URL> –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏.")
    elif call.data == 'cmd_play':
        bot.send_message(call.message.chat.id, "üé• –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /play <URL> –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ.")

bot.infinity_polling()
=======
import telebot
import socket
import platform
import os
import requests
import random
import time
import subprocess
from wakeonlan import send_magic_packet
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from pytube import YouTube

TOKEN = '7482583188:AAFj3GdfbPG1LGrnX0lVX-CBIcbAK1R8mA4'
ADMIN_ID = '1447911438'
GROUP_ID = '-1002571744053'

bot = telebot.TeleBot(TOKEN)
menu_message_id = None

def is_authorized(user):
    return str(user.id) == ADMIN_ID

def is_device_available():
    try:
        result = subprocess.run(['ping', '-c', '1', 'localhost'], capture_output=True, text=True)
        return result.returncode == 0
    except:
        return False

def clean_chat():
    try:
        message_id = 1
        deleted_count = 0
        while True:
            try:
                bot.delete_message(GROUP_ID, message_id)
                deleted_count += 1
                message_id += 1
                time.sleep(0.1)
            except telebot.apihelper.ApiTelegramException as e:
                if "message to delete not found" in str(e):
                    message_id += 1
                    continue
                elif "chat not found" in str(e) or "bot is not a member" in str(e):
                    bot.send_message(GROUP_ID, "üßπ –û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≥—Ä—É–ø–ø—ã –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                    return
                else:
                    break
        if deleted_count > 0:
            bot.send_message(GROUP_ID, f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π!")
        else:
            bot.send_message(GROUP_ID, "üßπ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    except Exception as e:
        bot.send_message(GROUP_ID, f"üßπ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {e}")

def get_main_menu():
    markup = InlineKeyboardMarkup(row_width=3)
    buttons = [
        ('üåê Get IP', 'cmd_ip'),
        ('üì∏ Screenshot', 'cmd_screenshot'),
        ('üíª Sys Info', 'cmd_sysinfo'),
        ('üì∑ Webcam', 'cmd_webcam'),
        ('üîå Wake-on-LAN', 'cmd_wol'),
        ('üñ•Ô∏è CMD', 'cmd_cmd'),
        ('üñºÔ∏è Wallpaper', 'cmd_wallpaper'),
        ('üåê Open URL', 'cmd_open'),
        ('üé• Play Video', 'cmd_play'),
        ('üé≤ Dice', 'cmd_dice'),
        ('‚ùì Help', 'cmd_help'),
        ('üßπ Clean Chat', 'cmd_clean')
    ]
    for text, data in buttons:
        markup.add(InlineKeyboardButton(text, callback_data=data))
    return markup

def get_back_button():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='cmd_back'))
    return markup

def update_menu(chat_id, message_id=None):
    global menu_message_id
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º."
    try:
        if message_id:
            bot.edit_message_text(text, chat_id=chat_id, message_id=message_id, reply_markup=get_main_menu(), parse_mode='HTML')
            menu_message_id = message_id
        else:
            sent_message = bot.send_message(chat_id, text, reply_markup=get_main_menu(), parse_mode='HTML')
            menu_message_id = sent_message.message_id
    except Exception as e:
        sent_message = bot.send_message(chat_id, text, reply_markup=get_main_menu(), parse_mode='HTML')
        menu_message_id = sent_message.message_id

def get_ip():
    try:
        ip = socket.gethostbyname(socket.gethostname())
        bot.send_message(GROUP_ID, f"üåê <b>IP-–∞–¥—Ä–µ—Å:</b> {ip}", parse_mode='HTML')
    except Exception as e:
        bot.send_message(GROUP_ID, f"üåê –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: {e}")

def take_screenshot():
    try:
        subprocess.run(['termux-screenshot', '/sdcard/screenshot.png'], check=True)
        bot.send_photo(GROUP_ID, open('/sdcard/screenshot.png', 'rb'), caption="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω")
        os.remove('/sdcard/screenshot.png')
    except Exception as e:
        bot.send_message(GROUP_ID, f"üì∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

def get_sysinfo():
    try:
        sysinfo = f"""
üíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</b>
‚Ä¢ <b>–°–∏—Å—Ç–µ–º–∞:</b> {platform.system()}
‚Ä¢ <b>–ò–º—è —É–∑–ª–∞:</b> {platform.node()}
‚Ä¢ <b>–†–µ–ª–∏–∑:</b> {platform.release()}
‚Ä¢ <b>–í–µ—Ä—Å–∏—è:</b> {platform.version()}
‚Ä¢ <b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b> {platform.machine()}
"""
        bot.send_message(GROUP_ID, sysinfo, parse_mode='HTML')
    except Exception as e:
        bot.send_message(GROUP_ID, f"üíª –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

def take_webcam_screenshot():
    try:
        subprocess.run(['termux-camera-photo', '-c', '0', '/sdcard/webcam.jpg'], check=True)
        bot.send_photo(GROUP_ID, open('/sdcard/webcam.jpg', 'rb'), caption="üì∑ –°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã")
        os.remove('/sdcard/webcam.jpg')
    except Exception as e:
        bot.send_message(GROUP_ID, f"üì∑ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–∞–º–µ—Ä—ã: {e}")

def shutdown_device():
    bot.send_message(GROUP_ID, "‚èª –í—ã–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ Android –±–µ–∑ root.")

def wake_on_lan():
    mac_address = '5A:57:F7:C7:D7:0A'
    send_magic_packet(mac_address)
    bot.send_message(GROUP_ID, "üîå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª Wake-on-LAN.")

def execute_cmd(command):
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        output = result.stdout if result.stdout else result.stderr
        bot.send_message(GROUP_ID, f"üñ•Ô∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n<code>{output}</code>", parse_mode='HTML')
    except Exception as e:
        bot.send_message(GROUP_ID, f"üñ•Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

def set_wallpaper_from_url(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            with open('/sdcard/wallpaper.jpg', 'wb') as f:
                f.write(response.content)
            subprocess.run(['termux-wallpaper', '-f', '/sdcard/wallpaper.jpg'], check=True)
            bot.send_message(GROUP_ID, "üñºÔ∏è –û–±–æ–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            os.remove('/sdcard/wallpaper.jpg')
        else:
            bot.send_message(GROUP_ID, "üñºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    except Exception as e:
        bot.send_message(GROUP_ID, f"üñºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±–æ–µ–≤: {e}")

def set_wallpaper_from_file(file_path):
    try:
        subprocess.run(['termux-wallpaper', '-f', file_path], check=True)
        bot.send_message(GROUP_ID, "üñºÔ∏è –û–±–æ–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        os.remove(file_path)
    except Exception as e:
        bot.send_message(GROUP_ID, f"üñºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

def open_url(url):
    try:
        subprocess.run(['termux-open-url', url], check=True)
        bot.send_message(GROUP_ID, f"üåê URL –æ—Ç–∫—Ä—ã—Ç: {url}")
    except Exception as e:
        bot.send_message(GROUP_ID, f"üåê –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ URL: {e}")

def play_video(url):
    try:
        yt = YouTube(url)
        stream = yt.streams.filter(progressive=True, file_extension='mp4').first()
        stream.download(filename='/sdcard/video.mp4')
        subprocess.run(['termux-open', '/sdcard/video.mp4'], check=True)
        bot.send_message(GROUP_ID, f"üé• –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ: {yt.title}")
        os.remove('/sdcard/video.mp4')
    except Exception as e:
        bot.send_message(GROUP_ID, f"üé• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")

def roll_dice():
    result = random.randint(1, 6)
    bot.send_message(GROUP_ID, f"üé≤ –ë—Ä–æ—Å–∞—é –∫—É–±–∏–∫... –†–µ–∑—É–ª—å—Ç–∞—Ç: **{result}**", parse_mode='HTML')

def send_help():
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
üåê /ip - –ü–æ–ª—É—á–∏—Ç—å IP-–∞–¥—Ä–µ—Å
üì∏ /screenshot - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
üíª /sysinfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
üì∑ /webcam - –°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã
üîå /wol - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª Wake-on-LAN
üñ•Ô∏è /cmd [–∫–æ–º–∞–Ω–¥–∞] - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ Termux
üñºÔ∏è /wallpaper [URL] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–æ–∏ —á–µ—Ä–µ–∑ URL –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
üåê /open [URL] - –û—Ç–∫—Ä—ã—Ç—å URL
üé• /play [URL] - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ
üé≤ /dice - –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
üßπ /clean - –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç –≥—Ä—É–ø–ø—ã
"""
    bot.send_message(GROUP_ID, help_text)

@bot.message_handler(commands=['start'])
def start_message(message):
    global menu_message_id
    if is_authorized(message.from_user):
        update_menu(message.chat.id, menu_message_id)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

@bot.message_handler(commands=['ip'])
def ip_command(message):
    if is_authorized(message.from_user):
        get_ip()
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(commands=['screenshot'])
def screenshot_command(message):
    if is_authorized(message.from_user):
        take_screenshot()
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(commands=['sysinfo'])
def sysinfo_command(message):
    if is_authorized(message.from_user):
        get_sysinfo()
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(commands=['webcam'])
def webcam_command(message):
    if is_authorized(message.from_user):
        take_webcam_screenshot()
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(commands=['shutdown'])
def shutdown_command(message):
    if is_authorized(message.from_user):
        shutdown_device()
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(commands=['wol'])
def wol_command(message):
    if is_authorized(message.from_user):
        wake_on_lan()
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(commands=['cmd'])
def cmd_command(message):
    global menu_message_id
    if is_authorized(message.from_user):
        command = message.text.split(' ', 1)[1] if len(message.text.split(' ', 1)) > 1 else ''
        if command:
            execute_cmd(command)
        else:
            try:
                bot.edit_message_text("üñ•Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /cmd ls", chat_id=message.chat.id, message_id=menu_message_id, reply_markup=get_back_button())
            except:
                sent_message = bot.send_message(message.chat.id, "üñ•Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /cmd ls", reply_markup=get_back_button())
                menu_message_id = sent_message.message_id
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(commands=['wallpaper'])
def wallpaper_command(message):
    global menu_message_id
    if is_authorized(message.from_user):
        url = message.text.split(' ', 1)[1] if len(message.text.split(' ', 1)) > 1 else ''
        if url:
            set_wallpaper_from_url(url)
        elif message.photo:
            try:
                file_info = bot.get_file(message.photo[-1].file_id)
                file = requests.get(f'https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}')
                with open('/sdcard/wallpaper.jpg', 'wb') as f:
                    f.write(file.content)
                set_wallpaper_from_file('/sdcard/wallpaper.jpg')
            except Exception as e:
                bot.send_message(GROUP_ID, f"üñºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±–æ–µ–≤: {e}")
        else:
            try:
                bot.edit_message_text("üñºÔ∏è –£–∫–∞–∂–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: /wallpaper https://example.com/image.jpg) –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", chat_id=message.chat.id, message_id=menu_message_id, reply_markup=get_back_button())
            except:
                sent_message = bot.send_message(message.chat.id, "üñºÔ∏è –£–∫–∞–∂–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: /wallpaper https://example.com/image.jpg) –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", reply_markup=get_back_button())
                menu_message_id = sent_message.message_id
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(commands=['open'])
def open_command(message):
    global menu_message_id
    if is_authorized(message.from_user):
        url = message.text.split(' ', 1)[1] if len(message.text.split(' ', 1)) > 1 else ''
        if url:
            open_url(url)
        else:
            try:
                bot.edit_message_text("üåê –£–∫–∞–∂–∏—Ç–µ URL, –Ω–∞–ø—Ä–∏–º–µ—Ä: /open https://google.com", chat_id=message.chat.id, message_id=menu_message_id, reply_markup=get_back_button())
            except:
                sent_message = bot.send_message(message.chat.id, "üåê –£–∫–∞–∂–∏—Ç–µ URL, –Ω–∞–ø—Ä–∏–º–µ—Ä: /open https://google.com", reply_markup=get_back_button())
                menu_message_id = sent_message.message_id
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(commands=['play'])
def play_command(message):
    global menu_message_id
    if is_authorized(message.from_user):
        url = message.text.split(' ', 1)[1] if len(message.text.split(' ', 1)) > 1 else ''
        if url:
            play_video(url)
        else:
            try:
                bot.edit_message_text("üé• –£–∫–∞–∂–∏—Ç–µ URL –≤–∏–¥–µ–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /play https://youtube.com/watch?v=video_id", chat_id=message.chat.id, message_id=menu_message_id, reply_markup=get_back_button())
            except:
                sent_message = bot.send_message(message.chat.id, "üé• –£–∫–∞–∂–∏—Ç–µ URL –≤–∏–¥–µ–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /play https://youtube.com/watch?v=video_id", reply_markup=get_back_button())
                menu_message_id = sent_message.message_id
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(commands=['dice'])
def dice_command(message):
    if is_authorized(message.from_user):
        roll_dice()
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(commands=['clean'])
def clean_command(message):
    if is_authorized(message.from_user):
        clean_chat()
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global menu_message_id
    if is_authorized(call.from_user):
        bot.answer_callback_query(call.id, "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        try:
            commands = {
                'cmd_ip': get_ip,
                'cmd_screenshot': take_screenshot,
                'cmd_sysinfo': get_sysinfo,
                'cmd_webcam': take_webcam_screenshot,
                'cmd_shutdown': shutdown_device,
                'cmd_wol': wake_on_lan,
                'cmd_dice': roll_dice,
                'cmd_help': send_help,
                'cmd_clean': clean_chat
            }
            if call.data in commands:
                commands[call.data]()
                bot.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º.", chat_id=call.message.chat.id, message_id=menu_message_id, reply_markup=get_main_menu())
            elif call.data == 'cmd_cmd':
                bot.edit_message_text("üñ•Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /cmd ls", chat_id=call.message.chat.id, message_id=menu_message_id, reply_markup=get_back_button())
            elif call.data == 'cmd_wallpaper':
                bot.edit_message_text("üñºÔ∏è –£–∫–∞–∂–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: /wallpaper https://example.com/image.jpg) –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", chat_id=call.message.chat.id, message_id=menu_message_id, reply_markup=get_back_button())
            elif call.data == 'cmd_open':
                bot.edit_message_text("üåê –£–∫–∞–∂–∏—Ç–µ URL, –Ω–∞–ø—Ä–∏–º–µ—Ä: /open https://google.com", chat_id=call.message.chat.id, message_id=menu_message_id, reply_markup=get_back_button())
            elif call.data == 'cmd_play':
                bot.edit_message_text("üé• –£–∫–∞–∂–∏—Ç–µ URL –≤–∏–¥–µ–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /play https://youtube.com/watch?v=video_id", chat_id=call.message.chat.id, message_id=menu_message_id, reply_markup=get_back_button())
            elif call.data == 'cmd_back':
                bot.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º.", chat_id=call.message.chat.id, message_id=menu_message_id, reply_markup=get_main_menu())
        except Exception as e:
            update_menu(call.message.chat.id)
    else:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

try:
    bot.get_updates(offset=-1)
except:
    pass

bot.remove_webhook()
bot.polling(none_stop=True)
>>>>>>> a2037b645ddb546f9b612709adbfad183d650438
